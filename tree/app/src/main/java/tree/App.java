/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tree;

import tree.data.BTNode;
import tree.data.BinaryNode;
import tree.data.Node;
import tree.structure.BinarySearchTree;
import tree.structure.BinaryTree;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {

            Integer x =Integer.valueOf(9);
            Double c = Double.valueOf(5);
            Float a = Float.valueOf("80");
            String b = String.valueOf("fizz");

            System.out.println(x);
            System.out.println(c);
            System.out.println(a);
            System.out.println(b);

        System.out.println(new App().getGreeting());
        // Binary search tree
        testBreadthFirst(new BinaryTree());
        System.out.println("\n");


        System.out.println("*******************");
        System.out.println("*******************");
        // Binary search tree
        BinarySearchTree<Integer> binarySearchTree = new BinarySearchTree<>();
        binarySearchTree.add(50);
        binarySearchTree.add(30);
        binarySearchTree.add(100);
        binarySearchTree.add(20);
        binarySearchTree.add(70);

        binarySearchTree.traverse(BinarySearchTree.TraversalOrder.INORDER);

    }

    public static void testBreadthFirst(BinaryTree binaryTree) {

        //root level 1
        binaryTree.setRoot(new BTNode(2));
        //level 2
        binaryTree.getRoot().setLeft(new BTNode(7));
        binaryTree.getRoot().setRight(new BTNode(5));
        //level 3
        binaryTree.getRoot().getLeft().setLeft(new BTNode(2));
        binaryTree.getRoot().getLeft().setRight(new BTNode(6));
        binaryTree.getRoot().getRight().setRight(new BTNode(9));
        //level 4
        binaryTree.getRoot().getLeft().getRight().setLeft(new BTNode(5));
        binaryTree.getRoot().getLeft().getRight().setRight(new BTNode(11));
        binaryTree.getRoot().getRight().getRight().setLeft(new BTNode(4));
        System.out.println( binaryTree.breadthFirst());
//        System.out.println("*********************8");
//        binaryTree.traverse(BinaryTree.TraversalOrder.POSTORDER);
//        System.out.println("\n");
//        binaryTree.traverse(BinaryTree.TraversalOrder.PREORDER);
//        System.out.println("dddd");


    }

}
