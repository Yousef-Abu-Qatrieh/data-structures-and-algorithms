/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package HashTable;

import HashTable.Structure.HashMap;
import org.junit.jupiter.api.Test;

import java.util.HashSet;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test
    void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }

    @Test
    public void testSetKeyValue() {
        HashMap<String, String> countryCities = new HashMap<>();
        countryCities.set("Jordan", "Amman");
        countryCities.set("United States", "Washington D.C.");
        countryCities.set("United Kingdom", "London");
        countryCities.set("Italy", "Rome");
        countryCities.set("France", "Paris");
        countryCities.set("Portugal", "Lisbon");
        int result = 6;
        int expected = countryCities.getSize();
        assertEquals(result, expected);

    }

    @Test
    public void testGetValueBasedOnKey() {
        HashMap<String, String> countryCities = new HashMap<>();
        countryCities.set("Jordan", "Amman");
        countryCities.set("United States", "Washington D.C.");
        countryCities.set("United Kingdom", "London");
        countryCities.set("Italy", "Rome");
        countryCities.set("France", "Paris");
        countryCities.set("Portugal", "Lisbon");
        String result = countryCities.get("Jordan");
        String expected = "Amman";
        assertEquals(result, expected);
    }

    @Test
    public void testNoKeyFound() {
        HashMap<String, String> countryCities = new HashMap<>();
        countryCities.set("Jordan", "Amman");
        countryCities.set("United States", "Washington D.C.");
        countryCities.set("United Kingdom", "London");
        countryCities.set("Italy", "Rome");
        countryCities.set("France", "Paris");
        countryCities.set("Portugal", "Lisbon");
        String result = countryCities.get("Brazil");
        String expected = null;
        assertEquals(result, expected);
    }

    @Test
    public void getAllKeys() {
        HashMap<String, String> countryCities = new HashMap<>();
        countryCities.set("Jordan", "Amman");
        countryCities.set("United States", "Washington D.C.");
        countryCities.set("United Kingdom", "London");
        countryCities.set("Italy", "Rome");
        countryCities.set("France", "Paris");
        countryCities.set("Portugal", "Lisbon");
        String result = countryCities.keys().toString();
        String expected = "[Jordan, Portugal, France, Italy, United Kingdom, United States]";
        assertEquals(result, expected);
    }

    @Test
    public void testContain() {
        HashMap<String, String> countryCities = new HashMap<>();
        countryCities.set("Jordan", "Amman");
        countryCities.set("United States", "Washington D.C.");
        countryCities.set("United Kingdom", "London");
        countryCities.set("Italy", "Rome");
        countryCities.set("France", "Paris");
        countryCities.set("Portugal", "Lisbon");
        List<String> keys = countryCities.keys();
        boolean result = keys.contains("Jordan");
        boolean expected = true;
        assertEquals(result, expected);

    }

    @Test
    public void testHashCode() {
        HashMap<String,String> countryCities=new HashMap<>();
        countryCities.set("Jordan","Amman");
        int result=countryCities.hashCode();
        int expected=1471948789;
        assertEquals(result,expected);

    }
    @Test
    public void testRepeatedWord(){

            HashMap<String, String> hashMap = new HashMap<>();

            String result = "a";
            String expected = hashMap.repeatedWord("once upon a time, there was a brave princess who...");

        assertEquals(result,expected );

        }
    @Test
    public void secondTestForRepeatedWord(){

        HashMap<String, String> hashMap = new HashMap<>();

        String result = "it";
        String expected = hashMap.repeatedWord("It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way â€“ in short, the period was so far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only...");

        assertEquals(result,expected );

    }
    @Test
    public void noRepeatedWord(){
        HashMap<String, String> hashMap = new HashMap<>();

        String result = "There is no redundant word";
        String expected = hashMap.repeatedWord("god bless you");
        assertEquals(result,expected );

    }
}
